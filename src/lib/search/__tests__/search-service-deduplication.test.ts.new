import { describe, expect, test, beforeEach, afterEach, vi } from 'vitest';
import { SearchProviderType } from '../factory';
import { SearchService } from '../search-service';
import { SearchResult } from '../types';

// Mock the provider factory
vi.mock('../factory', () => ({
  SearchProviderType: {
    SERPER: 'serper',
    SERPAPI: 'serpapi'
  },
  SearchProviderFactory: {
    createAllProviders: vi.fn(() => {
      // Mock provider implementation
      const mockProvider = {
        search: vi.fn().mockImplementation(async () => ({
          results: [
            {
              title: 'Result 1',
              url: 'https://example.com/page1',
              snippet: 'This is the first result'
            },
            {
              title: 'Result 1', // Duplicate title
              url: 'https://different-domain.com/page1',
              snippet: 'This is a duplicate of the first result'
            },
            {
              title: 'Different Title',
              url: 'https://example.com/page1', // Duplicate URL
              snippet: 'This has the same URL as the first result'
            },
            {
              title: 'Unique Result',
              url: 'https://example.com/page2',
              snippet: 'This is a unique result'
            }
          ],
          meta: {
            searchEngine: 'mock-engine',
            creditsUsed: 1
          },
          rawResponse: {}
        }))
      };

      const mockMap = new Map();
      mockMap.set(SearchProviderType.SERPER, mockProvider);
      return mockMap;
    })
  }
}));

describe('SearchService with Deduplication', () => {
  let searchService: SearchService;

  beforeEach(() => {
    // Create a new instance for each test
    searchService = new SearchService({
      providers: {},
      defaultProvider: SearchProviderType.SERPER
    });
  });

  test('deduplication is enabled by default', async () => {
    const results = await searchService.search({ query: 'test query' });

    // Should have removed duplicates
    expect(results[0].results.length).toBeLessThan(4);
    expect(results[0].metadata.deduplication?.enabled).toBe(true);
    expect(results[0].metadata.deduplication?.duplicatesRemoved).toBeGreaterThan(0);
  });

  test('deduplication can be disabled globally', async () => {
    // Create service with deduplication disabled
    const searchServiceNoDedup = new SearchService({
      providers: {},
      defaultProvider: SearchProviderType.SERPER,
      deduplication: { strictUrlMatching: true }
    });

    // Disable deduplication in the request
    const results = await searchServiceNoDedup.search({
      query: 'test query',
      deduplication: false
    });

    // Should keep all 4 results
    expect(results[0].results.length).toBe(4);
    expect(results[0].metadata.deduplication?.enabled).toBe(false);
    expect(results[0].metadata.deduplication?.duplicatesRemoved).toBe(0);
  });

  test('custom deduplication options work per-request', async () => {
    // First search with default options (should remove both duplicates)
    const defaultResults = await searchService.search({ query: 'test query' });

    // Second search with strictUrlMatching (should only remove URL duplicate)
    const strictResults = await searchService.search({
      query: 'test query',
      deduplication: { strictUrlMatching: true }
    });

    // Should have different deduplication behavior
    const defaultRemoved = defaultResults[0].metadata.deduplication?.duplicatesRemoved || 0;
    const strictRemoved = strictResults[0].metadata.deduplication?.duplicatesRemoved || 0;

    // With strictUrlMatching, we should remove fewer duplicates
    expect(strictRemoved).toBeLessThan(defaultRemoved);
  });

  test('ignoredDomains option prevents deduplication for specific domains', async () => {
    // Search with ignoredDomains containing one of our duplicate domains
    const results = await searchService.search({
      query: 'test query',
      deduplication: {
        ignoredDomains: ['different-domain.com']
      }
    });

    // Should only remove the URL duplicate but keep the title duplicate
    // from the ignored domain
    expect(results[0].results.length).toBe(3);
    expect(results[0].metadata.deduplication?.duplicatesRemoved).toBe(1);

    // Check that we kept the result from the ignored domain
    const resultUrls = results[0].results.map(r => r.url);
    expect(resultUrls).toContain('https://different-domain.com/page1');
  });
});
